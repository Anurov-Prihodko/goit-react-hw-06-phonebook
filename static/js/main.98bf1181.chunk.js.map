{"version":3,"sources":["components/Filter/Filter.module.css","redux/phonebook/phonebook-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/phonebook/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","completed","deleteContact","changeFilter","toggleCompleted","connect","dispatch","useState","setName","setNumber","handleChange","event","target","value","className","s","contactEditor","onSubmit","e","preventDefault","label","onChange","textarea","type","pattern","title","required","button","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","trim","contact","includes","mainState","contacts","onDeleteContact","contactId","onToggleCompleted","list","map","classNames","item","checkbox","checked","text","pug","onClick","state","App","totalContactsCount","useSelector","length","completeContactsCount","reduce","acc","todo","container","mainTitle","createReducer","find","alert","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.98bf1181.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3Qj6z\",\"text\":\"Filter_text__2Hem9\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('phonebook/add', (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n    completed: false,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('phonebook/delete');\r\nconst changeFilter = createAction('phonebook/changeFilter');\r\nconst toggleCompleted = createAction('phonebook/toggleCompleted');\r\n\r\nexport { addContact, deleteContact, changeFilter, toggleCompleted };\r\n\r\n// ===== БЕЗ БИБЛИОТЕКИ TOOLKIT =====\r\n\r\n// const addContact = (name, number) => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//     completed: false,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n// const toggleCompleted = contactId => ({\r\n//   type: TOGGLE_COMPLETED,\r\n//   payload: contactId,\r\n// });\r\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addContact } from '../../redux/phonebook/phonebook-actions';\nimport { connect } from 'react-redux';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ addContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    addContact(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.contactEditor} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          value={name}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          value={number}\n          onChange={handleChange}\n          className={s.textarea}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n\nContactForm.propTypes = {\n  addContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport {\n  deleteContact,\n  toggleCompleted,\n} from '../../redux/phonebook/phonebook-actions';\n\nconst ContactList = ({ contacts, onDeleteContact, onToggleCompleted }) => (\n  <ul className={s.list}>\n    {contacts.map(({ id, name, number, completed }) => (\n      <li key={id} className={classNames(s.item, { [s.completed]: completed })}>\n        <input\n          type=\"checkbox\"\n          className={s.checkbox}\n          checked={completed}\n          onChange={() => onToggleCompleted(id)}\n        />\n        <p className={s.text}>\n          {name}: {number}\n        </p>\n        <button\n          type=\"button\"\n          className={s.pug}\n          onClick={() => onDeleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n  onToggleCompleted: PropTypes.func.isRequired,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase().trim();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ mainState: { contacts, filter } }) => ({\n  contacts: getVisibleContacts(contacts, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: contactId => dispatch(deleteContact(contactId)),\n  onToggleCompleted: contactId => dispatch(toggleCompleted(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/phonebook/phonebook-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input type=\"text\" className={s.text} value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.mainState.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport s from './App.module.css';\n\nfunction App() {\n  const totalContactsCount = useSelector(\n    state => state.mainState.contacts.length,\n  );\n  const completeContactsCount = useSelector(state =>\n    state.mainState.contacts.reduce(\n      (acc, todo) => (todo.completed ? acc + 1 : acc),\n      0,\n    ),\n  );\n\n  return (\n    <div className={s.container}>\n      <h1 className={s.mainTitle}>Phonebook</h1>\n      <p className={s.text}>All contacts: {totalContactsCount}</p>\n      <p className={s.text}>Number of selected: {completeContactsCount} </p>\n\n      <ContactForm />\n      <h2 className={s.mainTitle}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n\n// ===== ЧЕРЕЗ CONNECT =====\n\n// App.propTypes = {\n//   totalContactsCount: PropTypes.number.isRequired,\n//   completeContactsCount: PropTypes.number.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   return {\n//     totalContactsCount: state.mainState.contacts.length,\n//     completeContactsCount: state.mainState.contacts.reduce(\n//       (acc, todo) => (todo.completed ? acc + 1 : acc),\n//       0,\n//     ),\n//   };\n// };\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContact,\r\n  deleteContact,\r\n  changeFilter,\r\n  toggleCompleted,\r\n} from './phonebook-actions';\r\n\r\nconst contactsArray = [\r\n  {\r\n    id: '',\r\n    name: '',\r\n    number: '',\r\n    completed: false,\r\n  },\r\n];\r\n\r\nconst addContactReducer = (state, { payload }) => {\r\n  if (state.find(({ name }) => name === payload.name)) {\r\n    alert(`${payload.name} is already in contacts.`);\r\n    return [...state];\r\n  }\r\n  return [...state, payload];\r\n};\r\n\r\nconst deleteContactReducer = (state, { payload }) =>\r\n  state.filter(({ id }) => id !== payload);\r\n\r\nconst toggleCompletedReducer = (state, { payload }) =>\r\n  state.map(contact =>\r\n    contact.id === payload\r\n      ? { ...contact, completed: !contact.completed }\r\n      : contact,\r\n  );\r\n\r\nconst contacts = createReducer(contactsArray, {\r\n  [addContact]: addContactReducer,\r\n  [deleteContact]: deleteContactReducer,\r\n  [toggleCompleted]: toggleCompletedReducer,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n\r\n// ===== БЕЗ БИБЛИОТЕКИ TOOLKIT =====\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contacts = (state = contactsArray, { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       if (state.find(({ name }) => name === payload.name)) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return [...state];\r\n//       }\r\n//       return [...state, payload];\r\n\r\n//     case DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     case TOGGLE_COMPLETED:\r\n//       return state.map(contact =>\r\n//         contact.id === payload\r\n//           ? { ...contact, completed: !contact.completed }\r\n//           : contact,\r\n//       );\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport contacts from './phonebook/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    mainState: persistReducer(contactsPersistConfig, contacts),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactEditor\":\"ContactForm_contactEditor__6wCNT\",\"textarea\":\"ContactForm_textarea__1gBK0\",\"label\":\"ContactForm_label__2afBv\",\"button\":\"ContactForm_button__3zxmi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2vaue\",\"item\":\"ContactList_item__Jwb7n\",\"completed\":\"ContactList_completed__3JaYc\",\"pug\":\"ContactList_pug__1c3zP\",\"text\":\"ContactList_text__3JlvE\",\"checkbox\":\"ContactList_checkbox__GXiao\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1kB37\",\"mainTitle\":\"App_mainTitle__VKuI4\",\"text\":\"App_text__XS2ua\"};"],"sourceRoot":""}